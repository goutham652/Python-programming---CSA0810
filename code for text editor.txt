import tkinter as tk
from tkinter import filedialog
from tkinter import font

class TextEditor:
    def _init_(self, root):
        self.root = root
        self.root.title("Text Editor")
        self.text_widget = tk.Text(root, wrap='word', undo=True)
        self.text_widget.pack(expand="yes", fill="both")

        # Menu Bar
        self.menu_bar = tk.Menu(root)
        self.root.config(menu=self.menu_bar)

        # File Menu
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="New", command=self.new_file)
        self.file_menu.add_command(label="Open", command=self.open_file)
        self.file_menu.add_command(label="Save", command=self.save_file)
        self.file_menu.add_command(label="Save As", command=self.save_as_file)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Exit", command=root.destroy)

        # Edit Menu
        self.edit_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Edit", menu=self.edit_menu)
        self.edit_menu.add_command(label="Undo", command=self.text_widget.edit_undo)
        self.edit_menu.add_command(label="Redo", command=self.text_widget.edit_redo)

        # Font Menu
        self.font_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Font", menu=self.font_menu)

        self.font_family = tk.StringVar()
        self.font_size = tk.IntVar()

        # Font Family Submenu
        font_families = ['Arial', 'Courier New', 'Georgia', 'Times New Roman', 'Verdana']
        self.font_menu.add_command(label="Font Family", state="disabled", command=lambda: None)
        for family in font_families:
            self.font_menu.add_radiobutton(label=family, variable=self.font_family, command=self.change_font)

        # Font Size Submenu
        font_sizes = [8, 10, 12, 14, 16, 18, 20, 24, 28, 32]
        self.font_menu.add_command(label="Font Size", state="disabled", command=lambda: None)
        for size in font_sizes:
            self.font_menu.add_radiobutton(label=str(size), variable=self.font_size, command=self.change_font)

    def new_file(self):
        self.text_widget.delete(1.0, tk.END)

    def open_file(self):
        file_path = filedialog.askopenfilename(defaultextension=".txt",
                                                 filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            with open(file_path, 'r') as file:
                self.text_widget.delete(1.0, tk.END)
                self.text_widget.insert(tk.END, file.read())
            self.root.title(f"Text Editor - {file_path}")

    def save_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                   filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            with open(file_path, 'w') as file:
                file.write(self.text_widget.get("1.0", tk.END))
            self.root.title(f"Text Editor - {file_path}")

    def save_as_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                   filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            with open(file_path, 'w') as file:
                file.write(self.text_widget.get("1.0", tk.END))
            self.root.title(f"Text Editor - {file_path}")

    def change_font(self):
        family = self.font_family.get()
        size = self.font_size.get()

        if not family or not size:
            return

        # Create a new font object with the specified family and size
        new_font = font.Font(family=family, size=size)

        # Get the currently selected text range
        sel_start = self.text_widget.index(tk.SEL_FIRST)
        sel_end = self.text_widget.index(tk.SEL_LAST)

        # Apply the new font to the selected text
        self.text_widget.tag_configure("custom_tag", font=new_font)
        self.text_widget.tag_add("custom_tag", sel_start, sel_end)

        # Set the focus to the text widget to ensure font changes take effect
        self.text_widget.focus_set()

if _name_ == "_main_":
    root = tk.Tk()
    text_editor = TextEditor(root)
    root.mainloop()